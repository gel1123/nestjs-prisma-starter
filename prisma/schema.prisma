datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  posts     Post[]
  role      Role
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

enum Role {
  ADMIN
  USER
}

model Bbs {
  id      String @id @default(uuid()) @db.Uuid
  bbsName String @db.VarChar(100)

  BbsThread BbsThread[]
}

model BbsThread {
  id          String @id @default(uuid()) @db.Uuid
  bbsId       String @db.Uuid
  threadName  String @db.VarChar(100)
  description String @db.VarChar(2000)

  bbs               Bbs                 @relation(fields: [bbsId], references: [id])
  BbsThreadResponse BbsThreadResponse[]
}

model BbsThreadResponse {
  id          String   @id @default(uuid()) @db.Uuid
  bbsThreadId String   @db.Uuid
  userId      String   @db.Uuid
  postedAt    DateTime @default(now())
  content     String   @db.VarChar(2000)

  bbsThread BbsThread @relation(fields: [bbsThreadId], references: [id])
  user      BbsUser   @relation(fields: [userId], references: [id])
}

model BbsUser {
  id       String @id @default(uuid()) @db.Uuid
  userName String @db.VarChar(100)

  BbsThreadResponse BbsThreadResponse[]
}
