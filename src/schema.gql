# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

"""掲示板"""
type Bbs {
  """掲示板のID"""
  bbsId: ID!

  """掲示板の名前"""
  bbsName: String!

  """掲示板に立てられたスレッドのリスト"""
  threads(
    """取得件数の上限"""
    limit: Int
  ): [BbsThread!]
}

"""スレッド"""
type BbsThread {
  """スレッドを立てた掲示板"""
  bbs: Bbs!

  """スレッドの説明"""
  description: String!

  """スレッドに投稿されたレスのリスト"""
  responses: [BbsThreadResponse!]

  """スレッドのID"""
  threadId: ID!

  """スレッド名"""
  threadName: String!
}

"""レス"""
type BbsThreadResponse {
  """レスの内容"""
  content: String!

  """レスを投稿した日時"""
  postedAt: DateTime!

  """レスのID"""
  responseId: ID!

  """レスを投稿したスレッド"""
  thread: BbsThread!

  """レスを投稿したユーザー"""
  user: BbsUser!
}

"""ユーザー"""
type BbsUser {
  """ユーザーが投稿したレスのリスト"""
  responses: [BbsThreadResponse!]

  """ユーザーのID"""
  userId: ID!

  """ユーザー名"""
  userName: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""新しい掲示板を立てる"""
input CreateBbsInput {
  """掲示板の名前"""
  bbsName: String!
}

"""新しいスレッドを立てる"""
input CreateBbsThreadInput {
  """スレッドを立てる掲示板のID"""
  bbsId: String!

  """スレッドの説明"""
  description: String!

  """スレッドの名前"""
  threadName: String!
}

"""新しいレスを作成する"""
input CreateBbsThreadResponseInput {
  """レスの内容"""
  content: String!

  """レスを作成するスレッドのID"""
  threadId: String!

  """レスを作成するユーザーのID"""
  userId: String!
}

"""新しいユーザーを作成する"""
input CreateBbsUserInput {
  """ユーザーの名前"""
  userName: String!
}

input CreatePostInput {
  content: String!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!

  """新しい掲示板を作成する"""
  createBbs(input: CreateBbsInput!): Bbs!

  """新しい掲示板ユーザーを作成する"""
  createBbsThread(input: CreateBbsThreadInput!): BbsThread!

  """新しい掲示板ユーザーを作成する"""
  createBbsThreadResponse(input: CreateBbsThreadResponseInput!): BbsThreadResponse!

  """新しい掲示板ユーザーを作成する"""
  createBbsUser(input: CreateBbsUserInput!): BbsUser!
  createPost(data: CreatePostInput!): Post!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User
  content: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type Query {
  """掲示板をIDで取得する"""
  bbs(
    """掲示板のID"""
    id: String!
  ): Bbs

  """スレッドをIDで取得する"""
  bbsThread(
    """スレッドのID"""
    id: ID!
  ): BbsThread

  """レスポンスをIDで取得する"""
  bbsThreadResponse(
    """レスポンスのID"""
    id: ID!
  ): BbsThreadResponse

  """ユーザーをIDで取得する"""
  bbsUser(
    """ユーザーのID"""
    id: ID!
  ): BbsUser
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  post(postId: String!): Post!
  publishedPosts(after: String, before: String, first: Int, last: Int, orderBy: PostOrder, query: String, skip: Int): PostConnection!
  userPosts(userId: String!): [Post!]!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Subscription {
  postCreated: Post!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  posts: [Post!]
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}